//ShapeGame.jack

/**
ShapeGame: Random Shape appears on at the top of the screen
and moves down at a constant rate.  The player must correctly
type the name of the shape before the shape reaches the bottom 
of the screen.
*/

class ShapeGame {

	static int SQUARE;
	static int CIRCLE;
	static int LINE;

	field int round;

	field char key;

	field Random random;

	field int currentShape;

	field boolean correctKey;

	field Square square;
	field Circle circle;
	field Line line;

	field String currentString;

	field boolean bottom;

	constructor ShapeGame new() {	

		let SQUARE = 0;
		let CIRCLE = 1;
		let LINE = 2;

		let round = 7;

		let bottom = false;
		let correctKey = false;

		let key = Keyboard.readChar();	
		let random = Random.new(key);

		return this;
	}

	method void setNextShape() {
		var int rand;
		let rand = random.getRandom();
		let currentShape = MathExtra.mod(rand, 3);
		return;
	}

	method void endGame() {
		return;
	}

	method void clearShape() {
		if (currentShape = SQUARE) {
			do square.erase();
		}
		if (currentShape = LINE) {
			do line.erase();
		}
		if (currentShape = CIRCLE) {
			do circle.erase();
		}
		return;
	}

	method void generateShape() {
		do setNextShape();

		if (currentShape = SQUARE) {
			let square = Square.new();
		}
		if (currentShape = CIRCLE) {
			let circle = Circle.new();
		}
		if (currentShape = LINE) {
			let line = Line.new();
		}
		return;
	}



	method boolean checkKey() {
		if (currentShape = SQUARE) {
			if (key = 83) {
				return true;
			}
		}
		if (currentShape = LINE) {
			if (key = 76) {
				return true;
			}
		}
		if (currentShape = CIRCLE) {
			if (key = 67) {
				return true;
			}
		}

		return false;
	}

	method void run() { 
		var boolean exit;
		let exit = false;

		while (~exit & (round > 0)) {	
			do Output.printInt(round);
			do generateShape();
			while (~bottom & ~correctKey) {
				if (currentShape = SQUARE) {
					let bottom = square.moveDown();
				}
				if (currentShape = LINE) {
					let bottom = line.moveDown();
				}
				if (currentShape = CIRCLE) {
					let bottom = circle.moveDown();
				}
				let key = Keyboard.keyPressed();
				if (~(key = 0)) {
					let correctKey = checkKey();
					if (correctKey) {
						do clearShape();
					}
				}

				do Sys.wait(100);
			}
			if (bottom) {
				let exit = true;
				do clearShape();
			}
			let round = round - 1;
			let bottom = false;
			let correctKey = false;

		}
		return; 
	}

	method void dispose() { 
		return; 
	}
}
/*
	method moveDown() {
		if (currentShape == 0) {
			square.moveDown();
		}
		if (currentShape == 1) {
			rectangle.moveDown();
		}
		if (currentShape == 2) {
			line.moveDown();
		}
	}
	*/
