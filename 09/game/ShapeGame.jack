/**
ShapeGame.jack

Authors: Eleni , Greg Krupit


/**
ShapeGame: Random Shape appears on at the top of the screen
and moves down at a constant rate.  The player must correctly
type the first letter of the shape before the shape reaches the bottom 
of the screen.
*/

class ShapeGame {

	//constants
	static int SQUARE;
	static int CIRCLE;
	static int LINE;

	//how many shapes left in game
	field int round;

	field int score;

	//stores last keypress
	field char key;

	//stores prevShape
	//used to compare previous shape to current shape
	field int prevShape;

	field Random random;

	field int currentShape;

	field int difficulty;

	field boolean correctKey;

	field Square square;
	field Circle circle;
	field Line line;

	field String startMsg;

	field boolean bottom;

	constructor ShapeGame new() {	

		let SQUARE = 0;
		let CIRCLE = 1;
		let LINE = 2;

		let round = 15;
		let score = 0;

		let bottom = false;
		let correctKey = false;


		do Output.printString("Enter Difficulty");
		do Output.println();
		do Output.printString("1 = hard");
		do Output.println();
		do Output.printString("2 = moderate");
		do Output.println();
		do Output.printString("3 = easiest");



		let key = Keyboard.readChar();

		do Output.printInt(key);
		do Screen.clearScreen();
		do Output.moveCursor(0,0);

		let difficulty = (key - 48) * 10;

		let startMsg = "Press any key to begin...";
		do Output.printString(startMsg);

		//Initialize random sequence of shapes
		//Start game
		let key = Keyboard.readChar();	
		do Screen.clearScreen();
		let random = Random.new(key);

		let currentShape = 4;

		return this;
	}


	//Queues next shape
	method void setNextShape() {
		var int rand;
		var int prevShape;
		let prevShape = currentShape;
		let rand = random.getRandom();
		let currentShape = MathExtra.mod(rand, 3);
		if (currentShape = prevShape) {
			let currentShape = MathExtra.mod((currentShape + 1), 3);
		}
		return;
	}

	//Clear shape currently drawn on screen
	method void clearShape() {
		if (currentShape = SQUARE) {
			do square.erase();
		}
		if (currentShape = LINE) {
			do line.erase();
		}
		if (currentShape = CIRCLE) {
			do circle.erase();
		}
		return;
	}

	//Draw next shape on screen
	method void generateShape() {
		do setNextShape();

		if (currentShape = SQUARE) {
			let square = Square.new();
		}
		if (currentShape = CIRCLE) {
			let circle = Circle.new();
		}
		if (currentShape = LINE) {
			let line = Line.new();
		}
		return;
	}


	//check if user's keypress matches current shape on screen
	method boolean checkKey() {
		if (currentShape = SQUARE) {
			if (key = 83) {
				return true;
			}
		}
		if (currentShape = LINE) {
			if (key = 76) {
				return true;
			}
		}
		if (currentShape = CIRCLE) {
			if (key = 67) {
				return true;
			}
		}

		return false;
	}


	//Run game
	method void run() { 
		var boolean exit;
		let exit = false;

		while (~exit & (round > 0)) {	
			do generateShape();
			while (~bottom & ~correctKey) {
				if (currentShape = SQUARE) {
					let bottom = square.moveDown();
				}
				if (currentShape = LINE) {
					let bottom = line.moveDown();
				}
				if (currentShape = CIRCLE) {
					let bottom = circle.moveDown();
				}
				let key = Keyboard.keyPressed();
				if (~(key = 0)) {
					let correctKey = checkKey();
					if (correctKey) {
						do clearShape();
					}
				}

				do Sys.wait(difficulty);
			}
			if (bottom) {
				let exit = true;
				do clearShape();
			}

			let round = round - 1;
			let score = score + 1;
			if (~bottom) {
				do Screen.clearScreen();
				do Output.moveCursor(0,0);
				do Output.printString("Score: ");
				do Output.printInt(score);					
			}

			let bottom = false;
			let correctKey = false;
		}
		return; 
	}

	method void dispose() {
		do square.dispose();
		do line.dispose();
		do circle.dispose(); 
		do random.dispose();
		do Memory.deAlloc(this);
		return; 
	}
}
